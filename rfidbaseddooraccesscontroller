#step-1 flask server for backened
from flask import Flask, request, jsonify
from flask_cors import CORS
import mysql.connector
import datetime

app = Flask(__name__)
CORS(app)

# Database configuration
db_config = { 'user': 'your_username', 'password': 'your_password', 'host': 'your_host','database': 'your_database'}

sensor_data = None

# Endpoint to receive RFID data from ESP32
@app.route('/api/rfid_data', methods=['POST'])
def receive_sensor_data():
    global sensor_data
    try:
        sensor_data = request.json  # Store the JSON data sent by the ESP32
        print(sensor_data)  # Print the received data

        # Check if RFID exists in the database
        rfid = sensor_data.get('rfid')
        if rfid:
            if check_rfid_in_database(rfid):
                return jsonify({"relay": "success"}), 200
            else:
                return jsonify({"relay": "failure", "message": "RFID not registered"}), 404
        else:
            return jsonify({"status": "error", "message": "RFID not provided"}), 400

    except Exception as e:
        print(f'Error receiving data: {e}')
        return jsonify({"status": "error"}), 400

# Function to check if RFID exists in the database
def check_rfid_in_database(rfid):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        query = "SELECT * FROM students WHERE rfid = %s"
        cursor.execute(query, (rfid,))
        result = cursor.fetchone()

        cursor.close()
        conn.close()

        return result is not None

    except mysql.connector.Error as err:
        print(f'Error checking RFID in database: {err}')
        return False

# Endpoint to send RFID data to the frontend
@app.route('/api/send_rfid_data', methods=['GET'])
def get_sensor_data():
    global sensor_data
    if sensor_data:
        response = jsonify(sensor_data)
        sensor_data = None  # Clear the sensor_data after sending it to the frontend
        return response, 200
    else:
        return jsonify({"error": "No data available"}), 404

# Endpoint to submit form data
@app.route('/api/submit_form', methods=['POST'])
def submit_form():
    data = request.json
    rfid = data.get('rfid')
    name = data.get('name')
    student_id = data.get('id')
    roll_number = data.get('roll_number')
    student_class = data.get('class')
    timestamp = datetime.datetime.now()

    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # Check if RFID already exists in the database
        if check_rfid_in_database(rfid):
            return jsonify({"status": "error", "message": "User is already registered"}), 409

        # Insert new data into the database
        query = """
        INSERT INTO students (rfid, name, student_id, roll_number, student_class, timestamp)
        VALUES (%s, %s, %s, %s, %s, %s)
        """
        cursor.execute(query, (rfid, name, student_id, roll_number, student_class, timestamp))
        conn.commit()

        cursor.close()
        conn.close()

        return jsonify({"status": "success", "message": "Data stored successfully"}), 200
    except mysql.connector.Error as err:
        print(f'Error: {err}')
        return jsonify({"status": "error", "message": str(err)}), 500

# Endpoint to retrieve all records (logs) from the database
@app.route('/api/logs', methods=['GET'])
def get_logs():
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)

        query = "SELECT * FROM students"
        cursor.execute(query)
        logs = cursor.fetchall()

        cursor.close()
        conn.close()

        return jsonify(logs), 200
    except mysql.connector.Error as err:
        print(f'Error: {err}')
        return jsonify({"status": "error", "message": str(err)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000)

#Step-2 react js code
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const RFIDForm = () => {
    const [rfidData, setRfidData] = useState({});
    const [formData, setFormData] = useState({
        rfid: '',
        name: '',
        id: '',
        roll_number: '',
        class: ''
    });
    const [logs, setLogs] = useState([]);

    useEffect(() => {
        const fetchRfidData = async () => {
            try {
                const response = await axios.get('http://localhost:3000/api/send_rfid_data');
                setRfidData(response.data);
                setFormData({ ...formData, rfid: response.data.rfid });
            } catch (error) {
                console.error('Error fetching RFID data:', error);
            }
        };

        fetchRfidData();
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            await axios.post('http://localhost:3000/api/submit_form', formData);
            alert('Form submitted successfully');
        } catch (error) {
            console.error('Error submitting form:', error);
        }
    };

    const fetchLogs = async () => {
        try {
            const response = await axios.get('http://localhost:3000/api/logs');
            setLogs(response.data);
        } catch (error) {
            console.error('Error fetching logs:', error);
        }
    };

    return (
        <div>
            <form onSubmit={handleSubmit}>
                <input type="text" name="rfid" value={formData.rfid} readOnly />
                <input type="text" name="name" value={formData.name} onChange={handleChange} placeholder="Name" />
                <input type="text" name="id" value={formData.id} onChange={handleChange} placeholder="ID" />
                <input type="text" name="roll_number" value={formData.roll_number} onChange={handleChange} placeholder="Roll Number" />
                <input type="text" name="class" value={formData.class} onChange={handleChange} placeholder="Class" />
                <button type="submit">Submit</button>
            </form>
            <button onClick={fetchLogs}>Fetch Logs</button>
            <ul>
                {logs.map(log => (
                    <li key={log.id}>{JSON.stringify(log)}</li>
                ))}
            </ul>
        </div>
    );
};

export default RFIDForm;

#step-3 send the static rfid data from the esp32 through http post method
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "Airtel_tejv_3002";  // WiFi SSID
const char* password = "air73137";      // WiFi password

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  // Simulate reading sensor data
  int voltage = random(0, 12);

  // Create JSON data
  String postData = "{\"voltage\":" + String(voltage) "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String serverPath = "http://192.168.1.29:3000/api/sensordata";  // Replace with the correct IP address and port

    // Log the endpoint and data
    Serial.println("Posting to: " + serverPath);
    Serial.println("PostPacket: " + postData);
    
    http.begin(serverPath);
    http.addHeader("Content-Type", "application/json");  // Changed to application/json

    int httpResponseCode = http.POST(postData);

    // Print HTTP response code and payload
    Serial.print("httpCode: ");
    Serial.println(httpResponseCode);

    if (httpResponseCode > 0 && httpResponseCode < 400) {
      String response = http.getString();
      Serial.println(response);
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }

  delay(10000);  // Send data every 10 seconds
}
